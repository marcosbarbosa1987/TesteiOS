//
//  FormScreenViewController.swift
//  SantanderTest
//
//  Created by Marcos Barbosa on 08/04/19.
//  Copyright (c) 2019 Marcos Barbosa. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FormScreenDisplayLogic: class {
    func displayForms(viewModel: [FormScreen.Something.ViewModel])
    func displayMessageError()
}

class FormScreenViewController: UIViewController, FormScreenDisplayLogic {
    
    var interactor: FormScreenBusinessLogic?
    var router: (NSObjectProtocol & FormScreenRoutingLogic & FormScreenDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = FormScreenInteractor()
        let presenter = FormScreenPresenter()
        let router = FormScreenRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        doSomething()
        
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething() {
        
        let request = FormScreen.Something.Request.init(url: URLS.FormFields.rawValue)
        interactor?.getFormsDetails(request: request)
        
        
    }
    
    func displayForms(viewModel: [FormScreen.Something.ViewModel]) {
        //nameTextField.text = viewModel.name
        print("numero de objetos no viewModel: \(viewModel.count)")
    }
    
    func displayMessageError() {
        print("error on result api menager")
    }
}
